<div class="login-bg">
	<div class="log-wraper">
		<div class="log-box" [ngClass]="login ? 'arive' : 'leave'">
			<div class="log-heading">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 223 91" width="221" height="90">
					<style>
						tspan {
							white-space: pre
						}

						.shp0 {
							fill: #bf2f38
						}

						.shp1 {
							fill: #5a5b5d
						}

						.shp2 {
							fill: #000000
						}
					</style>

					<path id="Layer" class="shp0"
						d="M35.4 62.5L35.4 33.3C35.4 25.3 35.3 14.9 34.8 5.7L10.1 5.7C6.7 5.7 3.7 7.8 0.5 9.9L2.8 0.5L197.8 0.5C197.4 2.7 195.1 5.5 190.2 5.5L44.2 5.5C43.8 15.7 43.7 26.7 43.7 34.7C43.7 52.2 43.7 85.8 46.1 88.3L33 88.3C35.3 85.8 35.4 78.5 35.4 62.5Z" />
					<path id="Layer" class="shp0"
						d="M186.7 18.7L207 74.1L217.5 74.1C212 66.3 203.6 45.7 193.5 12.1L181.5 12.1C182 13.1 182.3 14 182.3 15.1C182.3 16.5 179.6 25.5 172.8 41.3C166.7 55.6 160.9 66.5 154.6 74.1L167 74.1C166.7 73.1 166.5 72.2 166.5 71.1C166.5 66.8 168.3 62.5 170.5 57.4L186.7 18.7Z" />
					<path id="Layer" class="shp1" d="M192.3 70.3L181.7 76.4L181.7 52.2L192.3 46.1L192.3 70.3Z" />
					<path id="Layer" class="shp0"
						d="M68.5 70.5L61.4 70.5C60.7 67.5 60.5 60.6 60.5 50.1L60.5 43.8C61.6 43.8 62.4 43.9 63 43.9C73 43.9 80 43.5 84.5 38.3C79.7 39.2 74.2 39.4 68 39.4C65.2 39.4 62.7 39.4 60.5 39.2L60.5 36C60.5 29.7 60.6 24.8 60.8 21.2L56.7 17.4L76.4 17.4C79.8 17.4 82.8 17.7 86 19.8L83.7 12.2L50.9 12.2L50.8 12.1L49.7 12.1C52.1 14.6 52.1 24.4 52.1 41.8L52.1 45.8C52.1 62.4 52 71.7 49.7 74.1L57.6 74.1C65.7 74.1 73.8 74.3 78.9 74.3C82.8 74.3 85.8 73.8 88.8 71.8L90.2 63.9C86.3 69.4 79.5 70.5 68.5 70.5Z" />
					<path id="Layer" class="shp2"
						d="M61.6 79.4C60.5 78.8 59.7 78.5 58.7 78.5C56.1 78.5 54.3 80.3 54.3 83.1C54.3 86 56.2 88 58.9 88C60 88 61 87.7 61.8 87.1L62.4 88.3C61.2 89.1 60 89.5 58.6 89.5C55.1 89.5 52.5 86.9 52.5 83.3C52.5 79.6 55.1 77 58.7 77C60 77 61.1 77.3 62.3 78L61.6 79.4Z" />
					<path id="Layer" fill-rule="evenodd" class="shp2"
						d="M79.5 85.5L74.6 85.5L73.1 89.3L71.5 89.3L76.6 77.1L77.7 77.1L82.7 89.3L81 89.3L79.5 85.5ZM77 79.5L75.1 84.3L79 84.3L77 79.5Z" />
					<path id="Layer" fill-rule="evenodd" class="shp2"
						d="M96.7 77.3C99.7 77.3 101.4 78.5 101.4 80.7C101.4 82.3 100.6 83.4 99 84L102.8 89.3L100.9 89.3L97.5 84.4L95.6 84.4L95.6 89.3L94 89.3L94 77.4C95.1 77.3 95.8 77.2 96.7 77.3ZM95.5 83.3L97.8 83.3C98.8 83.3 99.7 82.3 99.7 81C99.7 79.4 98.7 78.6 96.5 78.6C96.2 78.6 95.9 78.6 95.5 78.6L95.5 83.3Z" />
					<path id="Layer" class="shp2" d="M115.6 89.3L114 89.3L114 77.4L115.6 77.4L115.6 89.3Z" />
					<path id="Layer" fill-rule="evenodd" class="shp2"
						d="M130.9 77.3C133.3 77.3 134.8 78.4 134.8 80.2C134.8 81.3 134.3 82.1 133 82.8C134.7 83.2 135.7 84.4 135.7 86C135.7 88.2 134 89.4 130.9 89.4C130.2 89.4 129.5 89.3 128 89.2L128 77.4C129.5 77.3 130.1 77.2 130.9 77.3ZM129.6 78.5L129.6 82.5L131.4 82.5C132.2 82.5 133.1 81.4 133.1 80.3C133.1 79.2 132.1 78.4 130.5 78.4C130.2 78.4 130 78.4 129.5 78.5L129.6 78.5ZM129.4 83.7L129.4 88C130.2 88.1 130.6 88.1 131.1 88.1C132.9 88.1 133.9 87.4 133.9 86C133.9 85.2 133.4 84.4 132.6 84C132.3 83.8 131.7 83.7 131 83.7L129.4 83.7Z" />
					<path id="Layer" fill-rule="evenodd" class="shp2"
						d="M150.4 77.3C152.8 77.3 154.3 78.4 154.3 80.2C154.3 81.3 153.8 82.1 152.5 82.8C154.2 83.2 155.2 84.4 155.2 86C155.2 88.2 153.5 89.4 150.4 89.4C149.7 89.4 149 89.3 147.5 89.2L147.5 77.4C149.1 77.3 149.6 77.2 150.4 77.3ZM149.1 82.5L150.9 82.5C151.7 82.5 152.6 81.4 152.6 80.3C152.6 79.2 151.7 78.4 150.1 78.4C149.8 78.4 149.6 78.4 149.1 78.5L149.1 82.5ZM149.2 83.7L149.2 88C150 88.1 150.4 88.1 150.9 88.1C152.6 88.1 153.6 87.4 153.6 86C153.6 85.2 153.1 84.4 152.3 84C151.9 83.8 151.3 83.7 150.6 83.7L149.2 83.7Z" />
					<path id="Layer" class="shp2"
						d="M173.5 78.7L168.7 78.7L168.7 82.4L173.1 82.4L173.1 83.7L168.7 83.7L168.7 87.9L174.3 87.9L174.1 89.3L167.1 89.3L167.1 77.4L173.5 77.4L173.5 78.7Z" />
					<path id="Layer" fill-rule="evenodd" class="shp2"
						d="M192.7 85.5L187.8 85.5L186.3 89.3L184.7 89.3L189.8 77.1L190.9 77.1L195.9 89.3L194.2 89.3L192.7 85.5ZM190.2 79.5L188.3 84.3L192.2 84.3L190.2 79.5Z" />
					<path id="Layer" class="shp2"
						d="M208 77.2L215.9 86.4L215.9 77.4L217.4 77.4L217.4 89.2L216.6 89.5L208.6 80.2L208.6 89.3L207.2 89.3L207.2 77.5L208 77.2Z" />
					<g id="Layer">
						<path id="Layer" class="shp0"
							d="M125.4 61.3L111.6 42.1C121.3 38 126.3 31.8 126.3 23.8C126.3 15.8 121.3 11.4 111.4 11.4C107.2 11.4 100.3 12.1 90.4 12.1L87.6 12.1C90 14.6 90 24.4 90 41.8L90 45.8C90 62.4 89.9 71.7 87.6 74.1L100.7 74.1C98.3 71.4 98.3 63.6 98.3 50.1L98.3 35C98.3 28.7 98.4 24.6 98.6 21.6L94.3 17.3L101.7 17.3C103 17.2 104.2 17.2 105.3 17.2C113.2 17.2 117.6 21 117.6 27.3C117.6 34.4 113.7 38.5 107.7 40.2C105.6 40.8 102.8 41 101.4 40.4C101.4 41.1 101.7 42 102.7 43.3C103.7 44.6 122.9 71.6 122.9 71.6C124.3 73.6 125.3 74.1 127.7 74.1L136.9 74.1C133.9 72 130.1 67.7 125.4 61.3Z" />
					</g>
					<g id="Layer">
						<path id="Layer" class="shp0"
							d="M165.3 61.3L151.5 42.1C161.2 38 166.2 31.8 166.2 23.8C166.2 15.8 161.2 11.4 151.3 11.4C147.1 11.4 140.2 12.1 130.3 12.1L127.5 12.1C129.9 14.6 129.9 24.4 129.9 41.8L129.9 45.8C129.9 62.4 129.8 71.7 127.5 74.1L140.6 74.1C138.2 71.4 138.2 63.6 138.2 50.1L138.2 35C138.2 28.8 138.3 24.7 138.5 21.8L134 17.4L141.5 17.4C142.8 17.3 144 17.3 145.1 17.3C153 17.3 156.8 19.1 156.8 26.7C156.8 33.8 153.6 38.5 147.6 40.2C145.5 40.8 142.7 41 141.3 40.4C141.3 41.1 141.6 42 142.6 43.3C143.6 44.6 162.8 71.6 162.8 71.6C164.2 73.6 165.2 74.1 167.6 74.1L176.8 74.1C173.8 72 169.9 67.7 165.3 61.3Z" />
					</g>

				</svg>
			</div>
			<form [formGroup]="loginForm" (keydown)="keyDown($event)">
				<mat-form-field appearance="outline" size="small" color="primary">
					<mat-label>Email Address</mat-label>
					<input matInput (keypress)="enterPress($event)" placeholder="Email Address" formControlName="userId"
						required="">
					<i class="icon-email" matSuffix></i>
					<mat-error
						*ngIf="loginForm.controls.userId.hasError('email') && !loginForm.controls.userId.hasError('required')">
						Please enter a valid email address
					</mat-error>
					<mat-error *ngIf="loginForm.controls.userId.hasError('required')">
						Email is <strong>required</strong>
					</mat-error>
				</mat-form-field>
				<mat-form-field appearance="outline">
					<mat-label>Password</mat-label>
					<input matInput placeholder="Enter your password" (keypress)="enterPress($event)"
						[type]="hide ? 'password' : 'text'" formControlName="password">
					<mat-error *ngIf="loginForm.controls.password.hasError('required')">
						Password is <strong>required</strong>
					</mat-error>
					<button mat-icon-button matSuffix (click)="hide = !hide" [attr.aria-label]="'Hide password'"
						[attr.aria-pressed]="hide">
						<i class="icon-{{hide ? 'eye-off' : 'eye'}}"></i>
					</button>
				</mat-form-field>
				<div class="row justify-content-between align-items-center">
					<div class="col-auto">
						<mat-checkbox color="accent">Remember Me</mat-checkbox>
					</div>
					<div class="col-auto">
						<button mat-button color="primary" (click)="forget = !forget;login = !login;">Forgot
							Password</button>
					</div>
				</div>
				<ng-container *ngIf="!loadingState; else loaderTemplate_">
					<button mat-flat-button color="warn" class="btn-block login" type='button'
						(click)="submitForm()">Login</button>
				</ng-container>
				<ng-template #loaderTemplate_>
					<button mat-flat-button color="warn" class="btn-block login" disabled="">
						<svg class="lds-typing" xmlns="http://www.w3.org/2000/svg"
							xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100"
							preserveAspectRatio="xMidYMid" style="background: none;">
							<circle cx="24.5" cy="48.4263" r="6">
								<animate attributeName="cy" calcMode="spline"
									keySplines="0 0.5 0.5 1;0.5 0 1 0.5;0.5 0.5 0.5 0.5" repeatCount="indefinite"
									values="62.5;37.5;62.5;62.5" keyTimes="0;0.25;0.5;1" dur="1s" begin="-0.5s">
								</animate>
							</circle>
							<circle cx="41.5" cy="62.5" r="6">
								<animate attributeName="cy" calcMode="spline"
									keySplines="0 0.5 0.5 1;0.5 0 1 0.5;0.5 0.5 0.5 0.5" repeatCount="indefinite"
									values="62.5;37.5;62.5;62.5" keyTimes="0;0.25;0.5;1" dur="1s" begin="-0.375s">
								</animate>
							</circle>
							<circle cx="58.5" cy="62.5" r="6">
								<animate attributeName="cy" calcMode="spline"
									keySplines="0 0.5 0.5 1;0.5 0 1 0.5;0.5 0.5 0.5 0.5" repeatCount="indefinite"
									values="62.5;37.5;62.5;62.5" keyTimes="0;0.25;0.5;1" dur="1s" begin="-0.25s">
								</animate>
							</circle>
							<circle cx="75.5" cy="62.5" r="6">
								<animate attributeName="cy" calcMode="spline"
									keySplines="0 0.5 0.5 1;0.5 0 1 0.5;0.5 0.5 0.5 0.5" repeatCount="indefinite"
									values="62.5;37.5;62.5;62.5" keyTimes="0;0.25;0.5;1" dur="1s" begin="-0.125s">
								</animate>
							</circle>
						</svg>
					</button>
				</ng-template>
			</form>
		</div>
		<div class="log-box" [ngClass]="forget ? 'arive' : 'leave'">
			<div class="log-heading">
				<div> Forgot Password </div>
				<span>Enter the email address to reset your password</span>
			</div>
			<form [formGroup]="forgotForm">
				<mat-form-field appearance="outline" color="primary">
					<mat-label>Email Address</mat-label>
					<input matInput placeholder="Email Address" formControlName="forgotEmail" required="">
					<i class="icon-email" matSuffix></i>
					<mat-error *ngIf="emailFormControl.hasError('email') && !emailFormControl.hasError('required')">
						Please enter a valid email address
					</mat-error>
					<mat-error *ngIf="emailFormControl.hasError('required')">
						Email is <strong>required</strong>
					</mat-error>
				</mat-form-field>
				<button mat-flat-button color="warn" class="btn-block login"
					(click)="forget = !forget;login = !login; forgotPassword();">Submit</button>
				<button mat-button color="warn" class="btn-block" (click)="forget = !forget;login = !login">Back to
					Login</button>
			</form>
		</div>
	</div>
</div>

<--------TS File ----------->

import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormControl, Validators, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { GlobalService } from '../_shared/service/global.service';
import { LoginCredential } from '../_shared/store/models/login.model';
import { Store } from '@ngrx/store';
import { LoginAction, LoginCredentailSuccess, LoginCredentailFetch, LoginStatusClear } from '../_shared/store/actions/login.action';
import { fetchCountry } from '../_shared/store/actions/country.actions';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TabService } from '../_shared/service/tab.service';
import { OperatorPermission, OperatorPermissionUpdate } from '../_shared/store/actions/operator-permissions.actions';
import { OperatorPermissionService } from '../_shared/service/operator-permission.service';

@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit, OnDestroy {
    forget: boolean;
    hide = true;
    login = true;
    loginForm: FormGroup;
    forgotPasswordRouteTrigger: boolean = false;
    rememberMe: boolean;
    emailFormControl = new FormControl('', [
        Validators.required,
        Validators.email,
    ]);
    forgotForm: FormGroup;

    loadingState: boolean = false;

    private ngUnsubscribe = new Subject();
    constructor(private router: Router, private global: GlobalService, public store: Store<LoginCredential>, public operatorPermission: OperatorPermissionService, private _snackbar: MatSnackBar, public tabService: TabService) {
        this.store
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {
                if (data.login.success && data.login.successType == "[LOGIN] Credential Success") {
                    let authToken = data.login.token;
                    this.store.dispatch(new LoginStatusClear());
                    localStorage.setItem('authorizeToken', authToken);
                    localStorage.setItem('isLoggedIn', "true");
                    if (authToken != 'fe86e9c10c25a7c8c2c3b09c006a051cf57b18b7') {
                        let default_location_id = localStorage.getItem('default_location_id');
                        if (default_location_id !== null) {
                            let obj = { default_location_id: default_location_id, authToken,fromAuthGuards:true };
                            this.store.dispatch(new OperatorPermissionUpdate(obj));
                        } else {
                            this.store.dispatch(new OperatorPermission({authToken,fromAuthGuards:true}));
                        }
                    } else {
                        this.router.navigate(['employees']);
                        this._snackbar.open("Successfully login", 'close', {
                            duration: 3000
                        });
                    }
                    this.loadingState = false;
                }
                if (data.login.error && data.login.errorType == "[LOGIN] Credential Error") {
                    this.store.dispatch(new LoginStatusClear());
                    this._snackbar.open("invalid user name or password", 'close', {
                        duration: 3000
                    });
                    this.loadingState = false
                }
                if (data.operatorPermissions.success && data.operatorPermissions.successType == "GET_OPERATOR_PERMISSION_SUCCESS") {
                    console.log(data.operatorPermissions.fromComponent);
                    console.log(this.router.url);
                    
                    if(data.operatorPermissions.fromComponent !== 'property'){
                        if (this.router.url == '/' || this.router.url == '/login') {
                            // this.getModule();
                            this.operatorPermission.getModule();
                        }
                    }
                    this._snackbar.open("Successfully login", 'close', {
                        duration: 3000
                    });
                };
      
                if (data.operatorPermissions.error != null && data.operatorPermissions.error.error) {
                    this._snackbar.open(data.operatorPermissions.error.error, 'close', {
                        duration: 3000
                    });
                    localStorage.removeItem('authorizeToken');
                    localStorage.removeItem('isLoggedIn');
                }
            });
          
    };
    ngOnInit(): void {
        this.loginForm = new FormGroup({
            userId: new FormControl('', [Validators.required, Validators.email]),
            password: new FormControl('', Validators.required)
        })
        this.forgotForm = new FormGroup({
            forgotEmail: new FormControl('')
        });
        // CHECK REMEMBER ME IN SESSION STORAGE
        let isRememberMe = sessionStorage.getItem('isRememberMe');
        if (isRememberMe === 'true') {
            this.rememberMe = true
            let authUserId = sessionStorage.getItem('authUserId');
            let authUsePassword = sessionStorage.getItem('authUsePassword');
            if (authUserId && authUsePassword) {
                this.loginForm.setValue({ userId: authUserId, password: authUsePassword });
                this.submitForm()
            }
        } else {
            this.rememberMe = false;
        }
        this.store
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((state: any) => {
            })
        this.tabService.tabs = [];
    }
    ngOnDestroy() {
        // this.ngUnsubscribe.next();
        // this.ngUnsubscribe.complete();
    }
    submitForm() {
        this.loginForm.get('userId').markAsTouched();
        this.loginForm.get('password').markAsTouched();

        if (this.loginForm.valid) {
            let credentials = { username: 'admin', email: this.loginForm.value.userId, password: this.loginForm.value.password };
            this.store.dispatch(new LoginCredentailFetch(credentials));
            this.loadingState = true;
        }

    }
    // FUNCTION FOR TRIGGERING ANIMATION END
    transitionEnd(event: any) {
        // TRIGGERING ANIMATION END AND CHECKING LOCAL VARIABLE BEFORE CHANGING THE ROUTE TO FORGOTPASSWORD
        if (event.propertyName === "transform" && this.forgotPasswordRouteTrigger) {
            // CHANGE THE ROUTE IF ANIMATION HAS END AND FORGOT PASSWORD BUTTON IN CLICKED
            this.router.navigate(['forgot-password']);
        }
    }
    // REMEMBER ME FUNCTIONSLITY
    setRememberMe(userId: any, password: any) {
        sessionStorage.setItem('authUserId', userId);
        sessionStorage.setItem('authUsePassword', password);
        sessionStorage.setItem('isRememberMe', "true");
    }
    setRememberMeOption(event) {
        this.rememberMe = event.checked;
    }



    forgotPassword() {
        this.login = false;
        this.forget = true;
        if (this.forgotForm.valid) {
            let fEmail = this.forgotForm.value.forgotEmail;
            // this.router.navigate(['reset-password']);
            if (fEmail != "") {
                //start here is calling forgot api
                // this.global.post('/auth/password/reset/', { email: this.loginForm.value.fEmail })
                this.global.post('/resetpassword/', { email: fEmail })
                    .subscribe((result: any) => {
                        if (result.success == "true") {
                            this._snackbar.open("Please check your email and reset your password.", 'close', {
                                duration: 3000
                            });
                            this.forget = false;
                            this.login = true;
                        }

                        // localStorage.setItem('authorizeToken', JSON.stringify(result));

                        // if (JSON.stringify(result) != "") {

                        //     localStorage.setItem('isLoggedIn', "true");
                        //     if (this.rememberMe) {
                        //         this.setRememberMe(this.loginForm.value.userId, this.loginForm.value.password);
                        //     }
                        //     // this.router.navigate(['employees']);

                        // }

                    },
                        (error: any) => {
                            this._snackbar.open("Invalid userid or password, please try again!", 'close', {
                                duration: 3000
                            });

                        })
                // end here calling forgot api
            }
        }
    }
    keyDown(event) {
        if (event.keyCode == 13) {
            this.submitForm()
        }
    }



    // snackbar for display message

    openSnackBar1(message: string, action: string) {
        this._snackbar.open(message, action, {
            duration: 3000,
        });
    }

    enterPress(event: any) {
        if (event.keyCode == 13) {
            event.preventDefault();
            this.submitForm();
        }
    }

}
